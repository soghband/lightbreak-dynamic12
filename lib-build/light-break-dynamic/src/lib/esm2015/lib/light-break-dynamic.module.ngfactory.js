/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */ 
import * as i0 from "@angular/core";
import * as i1 from "./light-break-dynamic.module";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/common/http";
import * as i5 from "@angular/cdk/bidi";
import * as i6 from "@angular/cdk/portal";
import * as i7 from "@angular/cdk/platform";
import * as i8 from "ngx-scrollbar/smooth-scroll";
import * as i9 from "ngx-scrollbar";
var LightBreakDynamicModuleNgFactory = i0.ɵcmf(i1.LightBreakDynamicModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, []], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i2.NgLocalization, i2.NgLocaleLocalization, [i0.LOCALE_ID]), i0.ɵmpd(4608, i3.ɵangular_packages_forms_forms_n, i3.ɵangular_packages_forms_forms_n, []), i0.ɵmpd(4608, i4.HttpXsrfTokenExtractor, i4.ɵangular_packages_common_http_http_g, [i2.DOCUMENT, i0.PLATFORM_ID, i4.ɵangular_packages_common_http_http_e]), i0.ɵmpd(4608, i4.ɵangular_packages_common_http_http_h, i4.ɵangular_packages_common_http_http_h, [i4.HttpXsrfTokenExtractor, i4.ɵangular_packages_common_http_http_f]), i0.ɵmpd(5120, i4.HTTP_INTERCEPTORS, function (p0_0) { return [p0_0]; }, [i4.ɵangular_packages_common_http_http_h]), i0.ɵmpd(4608, i4.ɵangular_packages_common_http_http_d, i4.ɵangular_packages_common_http_http_d, []), i0.ɵmpd(6144, i4.XhrFactory, null, [i4.ɵangular_packages_common_http_http_d]), i0.ɵmpd(4608, i4.HttpXhrBackend, i4.HttpXhrBackend, [i4.XhrFactory]), i0.ɵmpd(6144, i4.HttpBackend, null, [i4.HttpXhrBackend]), i0.ɵmpd(4608, i4.HttpHandler, i4.ɵHttpInterceptingHandler, [i4.HttpBackend, i0.Injector]), i0.ɵmpd(4608, i4.HttpClient, i4.HttpClient, [i4.HttpHandler]), i0.ɵmpd(1073742336, i2.CommonModule, i2.CommonModule, []), i0.ɵmpd(1073742336, i3.ɵangular_packages_forms_forms_d, i3.ɵangular_packages_forms_forms_d, []), i0.ɵmpd(1073742336, i3.FormsModule, i3.FormsModule, []), i0.ɵmpd(1073742336, i5.BidiModule, i5.BidiModule, []), i0.ɵmpd(1073742336, i6.PortalModule, i6.PortalModule, []), i0.ɵmpd(1073742336, i7.PlatformModule, i7.PlatformModule, []), i0.ɵmpd(1073742336, i8.SmoothScrollModule, i8.SmoothScrollModule, []), i0.ɵmpd(1073742336, i9.NgScrollbarModule, i9.NgScrollbarModule, []), i0.ɵmpd(1073742336, i4.HttpClientXsrfModule, i4.HttpClientXsrfModule, []), i0.ɵmpd(1073742336, i4.HttpClientModule, i4.HttpClientModule, []), i0.ɵmpd(1073742336, i1.LightBreakDynamicModule, i1.LightBreakDynamicModule, []), i0.ɵmpd(256, i4.ɵangular_packages_common_http_http_e, "XSRF-TOKEN", []), i0.ɵmpd(256, i4.ɵangular_packages_common_http_http_f, "X-XSRF-TOKEN", [])]); });
export { LightBreakDynamicModuleNgFactory as LightBreakDynamicModuleNgFactory };
//# sourceMappingURL=data:application/json;base64,